// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createProvider method should create correct component tree without children 1`] = `
<div>
  testChild
</div>
`;

exports[`createProvider method should create correct component tree without children 2`] = `
<div>
  testChild
</div>
`;

exports[`createProvider method should create correct component tree without children 3`] = `
<Dreamstate.ScopeProvider>
  <Dreamstate.CombinedProvider[TestManager]>
    <div>
      testChild
    </div>
  </Dreamstate.CombinedProvider[TestManager]>
</Dreamstate.ScopeProvider>
`;

exports[`createProvider method should create correct component tree without children 4`] = `
<Dreamstate.ScopeProvider>
  <Dreamstate.ScopedProviders[TestManager]>
    <Dreamstate.ScopedProvider
      ManagerClass={[Function]}
      dependencies={
        Array [
          [Function],
        ]
      }
      scope={
        Object {
          "INTERNAL": Object {
            "REGISTRY": Object {
              "CONTEXT_INSTANCES_REGISTRY": Map {
                [Function] => TestManager {
                  "IS_DISPOSED": false,
                  "context": Object {
                    "first": "first",
                    "second": 2,
                    "third": false,
                  },
                  Symbol(SCOPE): [Circular],
                  Symbol(SIGNALING_HANDLER): [Function],
                  Symbol(SIGNAL_METADATA): Array [],
                  Symbol(QUERY_METADATA): Array [],
                },
              },
              "CONTEXT_OBSERVERS_REGISTRY": Map {
                [Function] => Set {
                  [Function],
                },
              },
              "CONTEXT_SERVICES_REFERENCES": Map {
                [Function] => 1,
              },
              "CONTEXT_STATES_REGISTRY": Map {
                [Function] => Object {
                  "first": "first",
                  "second": 2,
                  "third": false,
                },
              },
              "CONTEXT_SUBSCRIBERS_REGISTRY": Map {
                [Function] => Set {},
              },
              "QUERY_PROVIDERS_REGISTRY": Map {},
              "SIGNAL_LISTENERS_REGISTRY": Set {
                [Function],
              },
            },
            "addServiceObserver": [Function],
            "notifyObservers": [Function],
            "registerService": [Function],
            "removeServiceObserver": [Function],
            "subscribeToManager": [Function],
            "unRegisterService": [Function],
            "unsubscribeFromManager": [Function],
          },
          "emitSignal": [Function],
          "getContextOf": [Function],
          "queryDataAsync": [Function],
          "queryDataSync": [Function],
          "registerQueryProvider": [Function],
          "subscribeToSignals": [Function],
          "unRegisterQueryProvider": [Function],
          "unsubscribeFromSignals": [Function],
        }
      }
    >
      <div>
        testChild
      </div>
    </Dreamstate.ScopedProvider>
  </Dreamstate.ScopedProviders[TestManager]>
</Dreamstate.ScopeProvider>
`;

exports[`createProvider method should render correct component tree 1`] = `
<Dreamstate.ScopeProvider>
  <Dreamstate.CombinedProvider[TestManager]>
    <ScopeConsumer>
      <div>
        Content
      </div>
    </ScopeConsumer>
  </Dreamstate.CombinedProvider[TestManager]>
</Dreamstate.ScopeProvider>
`;

exports[`createProvider method should render correct component tree 2`] = `
<Dreamstate.ScopeProvider>
  <Dreamstate.ScopedProviders[TestManager]>
    <Dreamstate.ScopedProvider
      ManagerClass={[Function]}
      dependencies={
        Array [
          [Function],
        ]
      }
      scope={
        Object {
          "INTERNAL": Object {
            "REGISTRY": Object {
              "CONTEXT_INSTANCES_REGISTRY": Map {
                [Function] => TestManager {
                  "IS_DISPOSED": false,
                  "context": Object {
                    "first": "first",
                    "second": 2,
                    "third": false,
                  },
                  Symbol(SCOPE): [Circular],
                  Symbol(SIGNALING_HANDLER): [Function],
                  Symbol(SIGNAL_METADATA): Array [],
                  Symbol(QUERY_METADATA): Array [],
                },
              },
              "CONTEXT_OBSERVERS_REGISTRY": Map {
                [Function] => Set {
                  [Function],
                },
              },
              "CONTEXT_SERVICES_REFERENCES": Map {
                [Function] => 1,
              },
              "CONTEXT_STATES_REGISTRY": Map {
                [Function] => Object {
                  "first": "first",
                  "second": 2,
                  "third": false,
                },
              },
              "CONTEXT_SUBSCRIBERS_REGISTRY": Map {
                [Function] => Set {},
              },
              "QUERY_PROVIDERS_REGISTRY": Map {},
              "SIGNAL_LISTENERS_REGISTRY": Set {
                [Function],
              },
            },
            "addServiceObserver": [Function],
            "notifyObservers": [Function],
            "registerService": [Function],
            "removeServiceObserver": [Function],
            "subscribeToManager": [Function],
            "unRegisterService": [Function],
            "unsubscribeFromManager": [Function],
          },
          "emitSignal": [Function],
          "getContextOf": [Function],
          "queryDataAsync": [Function],
          "queryDataSync": [Function],
          "registerQueryProvider": [Function],
          "subscribeToSignals": [Function],
          "unRegisterQueryProvider": [Function],
          "unsubscribeFromSignals": [Function],
        }
      }
    >
      <ScopeConsumer>
        <div>
          Content
        </div>
      </ScopeConsumer>
    </Dreamstate.ScopedProvider>
  </Dreamstate.ScopedProviders[TestManager]>
</Dreamstate.ScopeProvider>
`;
